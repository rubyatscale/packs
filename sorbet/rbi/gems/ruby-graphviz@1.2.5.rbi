# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `ruby-graphviz` gem.
# Please instead update this file by running `bin/tapioca gem ruby-graphviz`.

# source://ruby-graphviz//lib/graphviz.rb#20
::IS_CYGWIN = T.let(T.unsafe(nil), FalseClass)

# source://ruby-graphviz//lib/graphviz.rb#19
::IS_JRUBY = T.let(T.unsafe(nil), FalseClass)

# source://ruby-graphviz//lib/graphviz/attrs.rb#17
class AttributeException < ::RuntimeError; end

# source://ruby-graphviz//lib/graphviz/types/gv_bool.rb#1
class BoolException < ::RuntimeError; end

# source://ruby-graphviz//lib/graphviz/types/color.rb#3
class ColorException < ::RuntimeError; end

# source://ruby-graphviz//lib/graphviz/dot2ruby.rb#21
class Dot2Ruby
  include ::GraphViz::Utils

  # @return [Dot2Ruby] a new instance of Dot2Ruby
  #
  # source://ruby-graphviz//lib/graphviz/dot2ruby.rb#24
  def initialize(xGVPath, xOutFile, xOutFormat = T.unsafe(nil)); end

  # source://ruby-graphviz//lib/graphviz/dot2ruby.rb#47
  def eval(xFile); end

  # source://ruby-graphviz//lib/graphviz/dot2ruby.rb#54
  def eval_string(data); end

  # source://ruby-graphviz//lib/graphviz/dot2ruby.rb#35
  def run(xFile); end
end

# source://ruby-graphviz//lib/graphviz/types/gv_double.rb#1
class DoubleException < ::RuntimeError; end

# spliteType or point
#
# spline ( ';' spline )*
# where spline =  (endp)? (startp)? point (triple)+
# and triple   =  point point point
# and endp  =  "e,%f,%f"
# and startp   =  "s,%f,%f"
#
# If a spline has points p1 p2 p3 ... pn, (n = 1 (mod 3)), the points correspond
# to the control points of a B-spline from p1 to pn. If startp is given, it touches
# one node of the edge, and the arrowhead goes from p1 to startp. If startp is not
# given, p1 touches a node. Similarly for pn and endp.
#
# source://ruby-graphviz//lib/graphviz/utils.rb#3
class GraphViz
  include ::GraphViz::Constants
  include ::GraphViz::Utils

  # Create a new graph object
  #
  # Options :
  # * :output : Output format (GraphViz::Constants::FORMATS) (default : dot)
  # * :file : Output file name (default : nil)
  # * :use : Program to use (GraphViz::Constants::PROGRAMS) (default : dot)
  # * :path : Program PATH
  # * :parent : Parent graph (default : nil)
  # * :type : Graph type (GraphViz::Constants::GRAPHTYPE) (default : digraph)
  # * :errors : DOT error level (default 1)
  #   * 0 = Error + Warning
  #   * 1 = Error
  #   * 2 = none
  #
  # @return [GraphViz] a new instance of GraphViz
  # @yield [_self]
  # @yieldparam _self [GraphViz] the object that the method was called on
  #
  # source://ruby-graphviz//lib/graphviz.rb#824
  def initialize(xGraphName, hOpts = T.unsafe(nil), &block); end

  # Create an edge between the current cluster and the node or cluster +oNode+
  #
  # @raise [ArgumentError]
  #
  # source://ruby-graphviz//lib/graphviz.rb#670
  def -(oNode); end

  # Create an edge between the current cluster and the node or cluster +oNode+
  #
  # @raise [ArgumentError]
  #
  # source://ruby-graphviz//lib/graphviz.rb#670
  def <<(oNode); end

  # Create an edge between the current cluster and the node or cluster +oNode+
  #
  # @raise [ArgumentError]
  #
  # source://ruby-graphviz//lib/graphviz.rb#670
  def >(oNode); end

  # Create an edge between the current cluster and the node or cluster +oNode+
  #
  # @raise [ArgumentError]
  #
  # source://ruby-graphviz//lib/graphviz.rb#670
  def >>(oNode); end

  # Get the value of the graph attribute +xAttrName+
  #
  # source://ruby-graphviz//lib/graphviz.rb#394
  def [](xAttrName); end

  # Set value +xValue+ to the graph attribute +xAttrName+
  #
  # source://ruby-graphviz//lib/graphviz.rb#386
  def []=(xAttrName, xValue); end

  # Add nodes and edges defined by a Hash
  #
  # source://ruby-graphviz//lib/graphviz.rb#332
  def add(h); end

  # source://ruby-graphviz//lib/graphviz.rb#191
  def add_edge(oNodeOne, oNodeTwo, hOpts = T.unsafe(nil)); end

  # Create a new edge
  #
  # In:
  # * node_one : First node (or node list)
  # * node_two : Second Node (or node list)
  # * options : Edge attributes
  #
  # source://ruby-graphviz//lib/graphviz.rb#204
  def add_edges(node_one, node_two, options = T.unsafe(nil)); end

  # Create a new graph
  #
  # In:
  # * xGraphName : Graph name
  # * hOpts : Graph attributes
  #
  # source://ruby-graphviz//lib/graphviz.rb#269
  def add_graph(xGraphName = T.unsafe(nil), hOpts = T.unsafe(nil), &block); end

  # source://ruby-graphviz//lib/graphviz.rb#85
  def add_node(xNodeName, hOpts = T.unsafe(nil)); end

  # Create a new node
  #
  # In:
  # * xNodeName : Name of the new node
  # * hOpts : Node attributes
  #
  # Return the GraphViz::Node object created
  #
  # source://ruby-graphviz//lib/graphviz.rb#99
  def add_nodes(node_name, options = T.unsafe(nil)); end

  # source://ruby-graphviz//lib/graphviz.rb#627
  def append_attributes_and_types(script); end

  # Return a new completed graph
  #
  # source://ruby-graphviz//lib/graphviz.rb#776
  def complete; end

  # Complete the current graph
  #
  # source://ruby-graphviz//lib/graphviz.rb#781
  def complete!; end

  # Return true if the graph is directed.
  #
  # @return [Boolean]
  #
  # source://ruby-graphviz//lib/graphviz.rb#787
  def directed?; end

  # source://ruby-graphviz//lib/graphviz.rb#418
  def each_attribut(&b); end

  # Calls block once for each attribute of the graph, passing the name and value to the
  # block as a two-element array.
  #
  # source://ruby-graphviz//lib/graphviz.rb#413
  def each_attribute(&b); end

  # Allow you to traverse edges
  #
  # source://ruby-graphviz//lib/graphviz.rb#237
  def each_edge(&block); end

  # Allow you to traverse graphs
  #
  # source://ruby-graphviz//lib/graphviz.rb#319
  def each_graph(&block); end

  # Allow you to traverse nodes
  #
  # source://ruby-graphviz//lib/graphviz.rb#176
  def each_node(&block); end

  # This accessor allow you to set global edges attributes
  #
  # source://ruby-graphviz//lib/graphviz.rb#79
  def edge; end

  # This accessor allow you to set global edges attributes
  #
  # source://ruby-graphviz//lib/graphviz.rb#79
  def edge=(_arg0); end

  # This accessor allow you to set global edges attributes
  #
  # source://ruby-graphviz//lib/graphviz.rb#79
  def edge_attrs; end

  # Get the number of edges
  #
  # source://ruby-graphviz//lib/graphviz.rb#250
  def edge_count; end

  # source://ruby-graphviz//lib/graphviz.rb#156
  def enumerate_nodes; end

  # Returns the first node found in the entire graph, starting from the root graph
  #
  # source://ruby-graphviz//lib/graphviz.rb#140
  def find_node(name); end

  # Return the edge object for the given index
  #
  # source://ruby-graphviz//lib/graphviz.rb#257
  def get_edge_at_index(index); end

  # Return the graph object for the given name (or nil)
  #
  # @yield [graph]
  #
  # source://ruby-graphviz//lib/graphviz.rb#308
  def get_graph(xGraphName, &block); end

  # Return the node object for the given name (or nil) in the current graph
  #
  # @yield [node]
  #
  # source://ruby-graphviz//lib/graphviz.rb#131
  def get_node(xNodeName, &block); end

  # Return the node object for the given index
  #
  # source://ruby-graphviz//lib/graphviz.rb#168
  def get_node_at_index(index); end

  # This accessor allow you to set global graph attributes
  #
  # source://ruby-graphviz//lib/graphviz.rb#71
  def graph; end

  # This accessor allow you to set global graph attributes
  #
  # source://ruby-graphviz//lib/graphviz.rb#71
  def graph=(_arg0); end

  # This accessor allow you to set global graph attributes
  #
  # source://ruby-graphviz//lib/graphviz.rb#71
  def graph_attrs; end

  # Get the number of graphs
  #
  # source://ruby-graphviz//lib/graphviz.rb#353
  def graph_count; end

  # @return [Boolean]
  #
  # source://ruby-graphviz//lib/graphviz.rb#791
  def has_parent_graph?; end

  # Get the graph name
  #
  # source://ruby-graphviz//lib/graphviz.rb#662
  def id; end

  # source://ruby-graphviz//lib/graphviz.rb#357
  def method_missing(idName, *args, &block); end

  # Get the graph name
  #
  # source://ruby-graphviz//lib/graphviz.rb#662
  def name; end

  # This accessor allow you to set global nodes attributes
  #
  # source://ruby-graphviz//lib/graphviz.rb#75
  def node; end

  # This accessor allow you to set global nodes attributes
  #
  # source://ruby-graphviz//lib/graphviz.rb#75
  def node=(_arg0); end

  # This accessor allow you to set global nodes attributes
  #
  # source://ruby-graphviz//lib/graphviz.rb#75
  def node_attrs; end

  # Get the number of nodes
  #
  # source://ruby-graphviz//lib/graphviz.rb#187
  def node_count; end

  # Generate the graph
  #
  # Options :
  # * :output : Output format (GraphViz::Constants::FORMATS)
  # * :file : Output file name
  # * :use : Program to use (GraphViz::Constants::PROGRAMS)
  # * :path : Program PATH
  # * :<format> => <file> : <file> can be
  #   * a file name
  #   * nil, then the output will be printed to STDOUT
  #   * String, then the output will be returned as a String
  # * :errors : DOT error level (default 1)
  #   * 0 = Error + Warning
  #   * 1 = Error
  #   * 2 = none
  #
  # source://ruby-graphviz//lib/graphviz.rb#447
  def output(hOpts = T.unsafe(nil)); end

  # source://ruby-graphviz//lib/graphviz.rb#685
  def pg; end

  # source://ruby-graphviz//lib/graphviz.rb#688
  def pg=(x); end

  # Return the root graph
  #
  # source://ruby-graphviz//lib/graphviz.rb#695
  def root_graph; end

  # Generate the graph
  #
  # Options :
  # * :output : Output format (GraphViz::Constants::FORMATS)
  # * :file : Output file name
  # * :use : Program to use (GraphViz::Constants::PROGRAMS)
  # * :path : Program PATH
  # * :<format> => <file> : <file> can be
  #   * a file name
  #   * nil, then the output will be printed to STDOUT
  #   * String, then the output will be returned as a String
  # * :errors : DOT error level (default 1)
  #   * 0 = Error + Warning
  #   * 1 = Error
  #   * 2 = none
  #
  # source://ruby-graphviz//lib/graphviz.rb#447
  def save(hOpts = T.unsafe(nil)); end

  # Return the first node found in the current graph, and it subgraphs
  #
  # source://ruby-graphviz//lib/graphviz.rb#146
  def search_node(name); end

  # source://ruby-graphviz//lib/graphviz.rb#711
  def set_position(xType, xKey, xValue); end

  # Create a new graph
  #
  # In:
  # * xGraphName : Graph name
  # * hOpts : Graph attributes
  #
  # source://ruby-graphviz//lib/graphviz.rb#269
  def subgraph(xGraphName = T.unsafe(nil), hOpts = T.unsafe(nil), &block); end

  # Create a new graph from the current subgraph
  #
  # source://ruby-graphviz//lib/graphviz.rb#424
  def to_graph; end

  # source://ruby-graphviz//lib/graphviz.rb#655
  def to_s; end

  # Return the graph type (graph digraph)
  #
  # source://ruby-graphviz//lib/graphviz.rb#343
  def type; end

  # source://ruby-graphviz//lib/graphviz.rb#346
  def type=(x); end

  private

  # Edge between a node and a Hash
  # Used by GraphViz#add
  #
  # source://ruby-graphviz//lib/graphviz.rb#892
  def add_hash_edge(node, hash); end

  class << self
    # source://ruby-graphviz//lib/graphviz.rb#699
    def commonGraph(o1, o2); end

    # Change default options (:use, :path, :errors and :output)
    #
    # source://ruby-graphviz//lib/graphviz.rb#724
    def default(hOpts); end

    # Create a new directed graph
    #
    # See also GraphViz::new
    #
    # source://ruby-graphviz//lib/graphviz.rb#917
    def digraph(xGraphName, hOpts = T.unsafe(nil), &block); end

    # Escape a string to be acceptable as a node name in a graphviz input file
    #
    # source://ruby-graphviz//lib/graphviz.rb#960
    def escape(str, opts = T.unsafe(nil)); end

    # Create a random graph.
    #
    # source://ruby-graphviz//lib/graphviz.rb#929
    def generate(num_nodes, num_edges, directed = T.unsafe(nil), weight_range = T.unsafe(nil)); end

    # Create a new undirected graph
    #
    # See also GraphViz::new
    #
    # source://ruby-graphviz//lib/graphviz.rb#908
    def graph(xGraphName, hOpts = T.unsafe(nil), &block); end

    # source://ruby-graphviz//lib/graphviz.rb#741
    def options(hOpts); end

    # Create a new graph from a GraphViz File
    #
    # Options :
    # * :output : Output format (GraphViz::Constants::FORMATS) (default : dot)
    # * :file : Output file name (default : none)
    # * :use : Program to use (GraphViz::Constants::PROGRAMS) (default : dot)
    # * :path : Program PATH
    #
    # @yield [graph]
    #
    # source://ruby-graphviz//lib/graphviz.rb#755
    def parse(xFile, hOpts = T.unsafe(nil), &block); end

    # Create a new graph from a GraphViz File
    #
    # Options :
    # * :output : Output format (GraphViz::Constants::FORMATS) (default : dot)
    # * :file : Output file name (default : none)
    # * :use : Program to use (GraphViz::Constants::PROGRAMS) (default : dot)
    # * :path : Program PATH
    #
    # @yield [graph]
    #
    # source://ruby-graphviz//lib/graphviz.rb#769
    def parse_string(str, hOpts = T.unsafe(nil), &block); end

    # Create a new strict directed graph
    #
    # See also GraphViz::new
    #
    # source://ruby-graphviz//lib/graphviz.rb#924
    def strict_digraph(xGraphName, hOpts = T.unsafe(nil), &block); end
  end
end

# source://ruby-graphviz//lib/graphviz/attrs.rb#21
class GraphViz::Attrs
  # @return [Attrs] a new instance of Attrs
  #
  # source://ruby-graphviz//lib/graphviz/attrs.rb#24
  def initialize(gviz, name, attributes); end

  # source://ruby-graphviz//lib/graphviz/attrs.rb#41
  def [](key); end

  # source://ruby-graphviz//lib/graphviz/attrs.rb#51
  def []=(key, value); end

  # Returns the value of attribute data.
  #
  # source://ruby-graphviz//lib/graphviz/attrs.rb#22
  def data; end

  # Sets the attribute data
  #
  # @param value the value to set the attribute data to.
  #
  # source://ruby-graphviz//lib/graphviz/attrs.rb#22
  def data=(_arg0); end

  # source://ruby-graphviz//lib/graphviz/attrs.rb#31
  def each; end

  # source://ruby-graphviz//lib/graphviz/attrs.rb#37
  def to_h; end
end

# source://ruby-graphviz//lib/graphviz/constants.rb#43
module GraphViz::Constants
  class << self
    # source://ruby-graphviz//lib/graphviz/constants.rb#111
    def getAttrsFor(x); end
  end
end

# Const: Edge attributes
#
# source://ruby-graphviz//lib/graphviz/constants.rb#301
GraphViz::Constants::EDGESATTRS = T.let(T.unsafe(nil), Hash)

# Const: Output formats
#
# source://ruby-graphviz//lib/graphviz/constants.rb#47
GraphViz::Constants::FORMATS = T.let(T.unsafe(nil), Array)

# E, N, G, S and C represent edges, nodes, the root graph, subgraphs and cluster subgraphs, respectively
#
# source://ruby-graphviz//lib/graphviz/constants.rb#120
GraphViz::Constants::GENCS_ATTRS = T.let(T.unsafe(nil), Hash)

# Const: Graph attributes
#
# source://ruby-graphviz//lib/graphviz/constants.rb#295
GraphViz::Constants::GRAPHSATTRS = T.let(T.unsafe(nil), Hash)

# Const: graphs type
#
# source://ruby-graphviz//lib/graphviz/constants.rb#105
GraphViz::Constants::GRAPHTYPE = T.let(T.unsafe(nil), Array)

# Const: Node attributes
#
# source://ruby-graphviz//lib/graphviz/constants.rb#298
GraphViz::Constants::NODESATTRS = T.let(T.unsafe(nil), Hash)

# Const: programs
#
# source://ruby-graphviz//lib/graphviz/constants.rb#95
GraphViz::Constants::PROGRAMS = T.let(T.unsafe(nil), Array)

# source://ruby-graphviz//lib/graphviz/constants.rb#44
GraphViz::Constants::RGV_VERSION = T.let(T.unsafe(nil), String)

# source://ruby-graphviz//lib/graphviz/dot_script.rb#48
class GraphViz::DOTScript
  extend ::Forwardable

  # @return [DOTScript] a new instance of DOTScript
  #
  # source://ruby-graphviz//lib/graphviz/dot_script.rb#53
  def initialize; end

  # source://ruby-graphviz//lib/graphviz/dot_script.rb#57
  def <<(line); end

  # source://ruby-graphviz//lib/graphviz/dot_script.rb#74
  def add_type(type, data); end

  # source://ruby-graphviz//lib/graphviz/dot_script.rb#57
  def append(line); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def end_with?(*args, &block); end

  # source://ruby-graphviz//lib/graphviz/dot_script.rb#70
  def make_subgraph(name); end

  # source://ruby-graphviz//lib/graphviz/dot_script.rb#64
  def prepend(line); end

  # source://ruby-graphviz//lib/graphviz/dot_script.rb#93
  def to_s; end

  # source://ruby-graphviz//lib/graphviz/dot_script.rb#93
  def to_str; end

  private

  # source://ruby-graphviz//lib/graphviz/dot_script.rb#104
  def append_statement(statement); end

  # source://ruby-graphviz//lib/graphviz/dot_script.rb#100
  def assure_ends_with(str, ending = T.unsafe(nil)); end
end

# source://ruby-graphviz//lib/graphviz/dot_script.rb#4
class GraphViz::DOTScriptData
  # @return [DOTScriptData] a new instance of DOTScriptData
  #
  # source://ruby-graphviz//lib/graphviz/dot_script.rb#6
  def initialize(type = T.unsafe(nil)); end

  # source://ruby-graphviz//lib/graphviz/dot_script.rb#12
  def <<(data); end

  # source://ruby-graphviz//lib/graphviz/dot_script.rb#17
  def add_attribute(name, value); end

  # source://ruby-graphviz//lib/graphviz/dot_script.rb#12
  def append(data); end

  # @return [Boolean]
  #
  # source://ruby-graphviz//lib/graphviz/dot_script.rb#32
  def empty?; end

  # source://ruby-graphviz//lib/graphviz/dot_script.rb#22
  def to_s; end

  # source://ruby-graphviz//lib/graphviz/dot_script.rb#22
  def to_str; end

  # Returns the value of attribute type.
  #
  # source://ruby-graphviz//lib/graphviz/dot_script.rb#5
  def type; end

  # Sets the attribute type
  #
  # @param value the value to set the attribute type to.
  #
  # source://ruby-graphviz//lib/graphviz/dot_script.rb#5
  def type=(_arg0); end

  private

  # source://ruby-graphviz//lib/graphviz/dot_script.rb#38
  def determine_separator; end
end

# source://ruby-graphviz//lib/graphviz/edge.rb#21
class GraphViz::Edge
  include ::GraphViz::Constants

  # Create a new edge
  #
  # In:
  # * vNodeOne : First node (can be a GraphViz::Node or a node ID)
  # * vNodeTwo : Second node (can be a GraphViz::Node or a node ID)
  # * parent_graph : Graph
  #
  # @return [Edge] a new instance of Edge
  #
  # source://ruby-graphviz//lib/graphviz/edge.rb#30
  def initialize(vNodeOne, vNodeTwo, parent_graph); end

  # source://ruby-graphviz//lib/graphviz/edge.rb#117
  def -(node); end

  # source://ruby-graphviz//lib/graphviz/edge.rb#117
  def <<(node); end

  # source://ruby-graphviz//lib/graphviz/edge.rb#117
  def >(node); end

  # source://ruby-graphviz//lib/graphviz/edge.rb#117
  def >>(node); end

  # Set values for edge attributes or
  # get the value of the given edge attribute +attribute_name+
  #
  # source://ruby-graphviz//lib/graphviz/edge.rb#82
  def [](attribute_name); end

  # Set value +attribute_value+ to the edge attribute +attribute_name+
  #
  # source://ruby-graphviz//lib/graphviz/edge.rb#75
  def []=(attribute_name, attribute_value); end

  # source://ruby-graphviz//lib/graphviz/edge.rb#112
  def each_attribut(global = T.unsafe(nil), &b); end

  # Calls block once for each attribute of the edge, passing the name and value to the
  # block as a two-element array.
  #
  # If global is set to false, the block does not receive the attributes set globally
  #
  # source://ruby-graphviz//lib/graphviz/edge.rb#103
  def each_attribute(global = T.unsafe(nil), &b); end

  # Return the node two as string (so with port if any)
  #
  # source://ruby-graphviz//lib/graphviz/edge.rb#57
  def head_node(with_port = T.unsafe(nil), escaped = T.unsafe(nil)); end

  # Return the index of the edge
  #
  # source://ruby-graphviz//lib/graphviz/edge.rb#67
  def index; end

  # source://ruby-graphviz//lib/graphviz/edge.rb#70
  def index=(i); end

  # Add edge options
  # use edge.<option>=<value> or edge.<option>( <value> )
  #
  # source://ruby-graphviz//lib/graphviz/edge.rb#152
  def method_missing(idName, *args, &block); end

  # Return the node one as string (so with port if any)
  #
  # source://ruby-graphviz//lib/graphviz/edge.rb#47
  def node_one(with_port = T.unsafe(nil), escaped = T.unsafe(nil)); end

  # Return the node two as string (so with port if any)
  #
  # source://ruby-graphviz//lib/graphviz/edge.rb#57
  def node_two(with_port = T.unsafe(nil), escaped = T.unsafe(nil)); end

  # source://ruby-graphviz//lib/graphviz/edge.rb#159
  def output(oGraphType); end

  # source://ruby-graphviz//lib/graphviz/edge.rb#133
  def pg; end

  # Return the root graph
  #
  # source://ruby-graphviz//lib/graphviz/edge.rb#129
  def root_graph; end

  # Set edge attributes
  #
  # Example :
  #   e = graph.add_edges( ... )
  #   ...
  #   e.set { |_e|
  #     _e.color = "blue"
  #     _e.fontcolor = "red"
  #   }
  #
  # @yield [_self]
  # @yieldparam _self [GraphViz::Edge] the object that the method was called on
  #
  # source://ruby-graphviz//lib/graphviz/edge.rb#146
  def set(&b); end

  # Return the node one as string (so with port if any)
  #
  # source://ruby-graphviz//lib/graphviz/edge.rb#47
  def tail_node(with_port = T.unsafe(nil), escaped = T.unsafe(nil)); end

  private

  # source://ruby-graphviz//lib/graphviz/edge.rb#186
  def getNodeNameAndPort(node); end
end

# source://ruby-graphviz//lib/graphviz/elements.rb#2
class GraphViz::Elements
  # @return [Elements] a new instance of Elements
  #
  # source://ruby-graphviz//lib/graphviz/elements.rb#3
  def initialize; end

  # source://ruby-graphviz//lib/graphviz/elements.rb#31
  def [](index, type = T.unsafe(nil)); end

  # source://ruby-graphviz//lib/graphviz/elements.rb#17
  def each(&b); end

  # source://ruby-graphviz//lib/graphviz/elements.rb#8
  def push(obj); end

  # source://ruby-graphviz//lib/graphviz/elements.rb#23
  def size_of(type); end
end

# source://ruby-graphviz//lib/graphviz/ext.rb#4
class GraphViz::Ext
  class << self
    # source://ruby-graphviz//lib/graphviz/ext.rb#5
    def find(ext = T.unsafe(nil)); end
  end
end

# source://ruby-graphviz//lib/graphviz/node.rb#21
class GraphViz::Node
  include ::GraphViz::Constants

  # Create a new node
  #
  # * node_id : ID of the node
  # * parent_graph : Graph
  #
  # @return [Node] a new instance of Node
  #
  # source://ruby-graphviz//lib/graphviz/node.rb#33
  def initialize(node_id, parent_graph); end

  # Create an edge between the current node and the node +node+
  #
  # source://ruby-graphviz//lib/graphviz/node.rb#97
  def -(node); end

  # Create an edge between the current node and the node +node+
  #
  # source://ruby-graphviz//lib/graphviz/node.rb#97
  def <<(node); end

  # Create an edge between the current node and the node +node+
  #
  # source://ruby-graphviz//lib/graphviz/node.rb#97
  def >(node); end

  # Create an edge between the current node and the node +node+
  #
  # source://ruby-graphviz//lib/graphviz/node.rb#97
  def >>(node); end

  # Get the value of the node attribute +attribute_name+
  #
  # source://ruby-graphviz//lib/graphviz/node.rb#67
  def [](attribute_name); end

  # Set value +attribute_value+ to the node attribute +attribute_name+
  #
  # source://ruby-graphviz//lib/graphviz/node.rb#61
  def []=(attribute_name, attribute_value); end

  # source://ruby-graphviz//lib/graphviz/node.rb#91
  def each_attribut(global = T.unsafe(nil), &b); end

  # Calls block once for each attribute of the node, passing the name and value to the
  # block as a two-element array.
  #
  # If global is set to false, the block does not receive the attributes set globally
  #
  # source://ruby-graphviz//lib/graphviz/node.rb#82
  def each_attribute(global = T.unsafe(nil), &b); end

  # Get the node ID
  #
  # source://ruby-graphviz//lib/graphviz/node.rb#43
  def id; end

  # List of nodes that are incident to the given node (in a directed graph neighbors == incidents)
  #
  # source://ruby-graphviz//lib/graphviz/node.rb#27
  def incidents; end

  # Return the node index
  #
  # source://ruby-graphviz//lib/graphviz/node.rb#48
  def index; end

  # source://ruby-graphviz//lib/graphviz/node.rb#51
  def index=(i); end

  # Add node options
  # use node.<option>=<value> or node.<option>( <value> )
  #
  # source://ruby-graphviz//lib/graphviz/node.rb#126
  def method_missing(idName, *args, &block); end

  # List of nodes that are directly accessible from given node (in a directed graph neighbors == incidents)
  #
  # source://ruby-graphviz//lib/graphviz/node.rb#25
  def neighbors; end

  # source://ruby-graphviz//lib/graphviz/node.rb#136
  def output; end

  # source://ruby-graphviz//lib/graphviz/node.rb#132
  def pg; end

  # Return the root graph
  #
  # source://ruby-graphviz//lib/graphviz/node.rb#56
  def root_graph; end

  # Set node attributes
  #
  # Example :
  #   n = graph.add_nodes( ... )
  #   ...
  #   n.set { |_n|
  #     _n.color = "blue"
  #     _n.fontcolor = "red"
  #   }
  #
  # @yield [_self]
  # @yieldparam _self [GraphViz::Node] the object that the method was called on
  #
  # source://ruby-graphviz//lib/graphviz/node.rb#120
  def set(&b); end
end

# source://ruby-graphviz//lib/graphviz/types.rb#2
class GraphViz::Types; end

# source://ruby-graphviz//lib/graphviz/types/arrow_type.rb#15
class GraphViz::Types::ArrowType < ::GraphViz::Types::Common
  # source://ruby-graphviz//lib/graphviz/types/arrow_type.rb#16
  def check(data); end

  # source://ruby-graphviz//lib/graphviz/types/arrow_type.rb#20
  def output; end

  # source://ruby-graphviz//lib/graphviz/types/arrow_type.rb#20
  def to_gv; end

  # source://ruby-graphviz//lib/graphviz/types/arrow_type.rb#27
  def to_ruby; end

  # source://ruby-graphviz//lib/graphviz/types/arrow_type.rb#20
  def to_s; end
end

# source://ruby-graphviz//lib/graphviz/types/color.rb#8
class GraphViz::Types::Color < ::GraphViz::Types::Common
  # source://ruby-graphviz//lib/graphviz/types/color.rb#12
  def check(data); end

  # source://ruby-graphviz//lib/graphviz/types/color.rb#46
  def output; end

  # source://ruby-graphviz//lib/graphviz/types/color.rb#46
  def to_gv; end

  # source://ruby-graphviz//lib/graphviz/types/color.rb#53
  def to_ruby; end

  # source://ruby-graphviz//lib/graphviz/types/color.rb#46
  def to_s; end
end

# source://ruby-graphviz//lib/graphviz/types/color.rb#9
GraphViz::Types::Color::HEX_FOR_COLOR = T.let(T.unsafe(nil), Regexp)

# source://ruby-graphviz//lib/graphviz/types/color.rb#10
GraphViz::Types::Color::RGBA = T.let(T.unsafe(nil), Regexp)

# source://ruby-graphviz//lib/graphviz/types/color_list.rb#3
class GraphViz::Types::ColorList < ::GraphViz::Types::Common
  # source://ruby-graphviz//lib/graphviz/types/color_list.rb#4
  def check(data); end

  # source://ruby-graphviz//lib/graphviz/types/color_list.rb#12
  def output; end

  # source://ruby-graphviz//lib/graphviz/types/color_list.rb#12
  def to_gv; end

  # source://ruby-graphviz//lib/graphviz/types/color_list.rb#19
  def to_ruby; end

  # source://ruby-graphviz//lib/graphviz/types/color_list.rb#12
  def to_s; end
end

# source://ruby-graphviz//lib/graphviz/types.rb#3
class GraphViz::Types::Common
  # @return [Common] a new instance of Common
  #
  # source://ruby-graphviz//lib/graphviz/types.rb#4
  def initialize(data); end

  # source://ruby-graphviz//lib/graphviz/types.rb#8
  def output; end

  # source://ruby-graphviz//lib/graphviz/types.rb#12
  def source; end
end

# source://ruby-graphviz//lib/graphviz/types/esc_string.rb#3
class GraphViz::Types::EscString < ::GraphViz::Types::Common
  # source://ruby-graphviz//lib/graphviz/types/esc_string.rb#4
  def check(data); end

  # source://ruby-graphviz//lib/graphviz/types/esc_string.rb#8
  def output; end

  # source://ruby-graphviz//lib/graphviz/types/esc_string.rb#8
  def to_gv; end

  # source://ruby-graphviz//lib/graphviz/types/esc_string.rb#15
  def to_ruby; end

  # source://ruby-graphviz//lib/graphviz/types/esc_string.rb#8
  def to_s; end
end

# source://ruby-graphviz//lib/graphviz/types/gv_bool.rb#19
class GraphViz::Types::GvBool < ::GraphViz::Types::Common
  # @raise [BoolException]
  #
  # source://ruby-graphviz//lib/graphviz/types/gv_bool.rb#23
  def check(data); end

  # source://ruby-graphviz//lib/graphviz/types/gv_bool.rb#37
  def output; end

  # source://ruby-graphviz//lib/graphviz/types/gv_bool.rb#37
  def to_gv; end

  # source://ruby-graphviz//lib/graphviz/types/gv_bool.rb#44
  def to_ruby; end

  # source://ruby-graphviz//lib/graphviz/types/gv_bool.rb#37
  def to_s; end
end

# source://ruby-graphviz//lib/graphviz/types/gv_bool.rb#21
GraphViz::Types::GvBool::BOOL_FALSE = T.let(T.unsafe(nil), Array)

# source://ruby-graphviz//lib/graphviz/types/gv_bool.rb#20
GraphViz::Types::GvBool::BOOL_TRUE = T.let(T.unsafe(nil), Array)

# source://ruby-graphviz//lib/graphviz/types/gv_double.rb#6
class GraphViz::Types::GvDouble < ::GraphViz::Types::Common
  # @raise [DoubleException]
  #
  # source://ruby-graphviz//lib/graphviz/types/gv_double.rb#9
  def check(data); end

  # source://ruby-graphviz//lib/graphviz/types/gv_double.rb#19
  def output; end

  # source://ruby-graphviz//lib/graphviz/types/gv_double.rb#23
  def to_f; end

  # source://ruby-graphviz//lib/graphviz/types/gv_double.rb#19
  def to_gv; end

  # source://ruby-graphviz//lib/graphviz/types/gv_double.rb#23
  def to_ruby; end

  # source://ruby-graphviz//lib/graphviz/types/gv_double.rb#19
  def to_s; end
end

# source://ruby-graphviz//lib/graphviz/types/gv_double.rb#7
GraphViz::Types::GvDouble::FLOAT_MASK = T.let(T.unsafe(nil), Regexp)

# source://ruby-graphviz//lib/graphviz/types/html_string.rb#4
class GraphViz::Types::HtmlString < ::GraphViz::Types::Common
  # source://ruby-graphviz//lib/graphviz/types/html_string.rb#5
  def check(data); end

  # source://ruby-graphviz//lib/graphviz/types/html_string.rb#9
  def output; end

  # source://ruby-graphviz//lib/graphviz/types/html_string.rb#9
  def to_gv; end

  # source://ruby-graphviz//lib/graphviz/types/html_string.rb#9
  def to_ruby; end

  # source://ruby-graphviz//lib/graphviz/types/html_string.rb#9
  def to_s; end
end

# source://ruby-graphviz//lib/graphviz/types/lbl_string.rb#5
class GraphViz::Types::LblString < ::GraphViz::Types::Common
  # source://ruby-graphviz//lib/graphviz/types/lbl_string.rb#6
  def check(data); end

  # source://ruby-graphviz//lib/graphviz/types/lbl_string.rb#10
  def output; end

  # source://ruby-graphviz//lib/graphviz/types/lbl_string.rb#10
  def to_gv; end

  # source://ruby-graphviz//lib/graphviz/types/lbl_string.rb#10
  def to_ruby; end

  # source://ruby-graphviz//lib/graphviz/types/lbl_string.rb#10
  def to_s; end
end

# source://ruby-graphviz//lib/graphviz/types/rect.rb#6
class GraphViz::Types::Rect < ::GraphViz::Types::Common
  # @raise [RectException]
  #
  # source://ruby-graphviz//lib/graphviz/types/rect.rb#10
  def check(data); end

  # source://ruby-graphviz//lib/graphviz/types/rect.rb#23
  def output; end

  # source://ruby-graphviz//lib/graphviz/types/rect.rb#23
  def to_gv; end

  # source://ruby-graphviz//lib/graphviz/types/rect.rb#30
  def to_ruby; end

  # source://ruby-graphviz//lib/graphviz/types/rect.rb#23
  def to_s; end
end

# source://ruby-graphviz//lib/graphviz/types/rect.rb#7
GraphViz::Types::Rect::FLOAT_MASK = T.let(T.unsafe(nil), Regexp)

# source://ruby-graphviz//lib/graphviz/types/rect.rb#8
GraphViz::Types::Rect::RECT_FINAL_MASK = T.let(T.unsafe(nil), Regexp)

# source://ruby-graphviz//lib/graphviz/types/spline_type.rb#18
class GraphViz::Types::SplineType < ::GraphViz::Types::Common
  # @raise [SplineTypeException]
  #
  # source://ruby-graphviz//lib/graphviz/types/spline_type.rb#29
  def check(data); end

  # source://ruby-graphviz//lib/graphviz/types/spline_type.rb#58
  def endp; end

  # source://ruby-graphviz//lib/graphviz/types/spline_type.rb#43
  def output; end

  # source://ruby-graphviz//lib/graphviz/types/spline_type.rb#50
  def point; end

  # source://ruby-graphviz//lib/graphviz/types/spline_type.rb#61
  def startp; end

  # source://ruby-graphviz//lib/graphviz/types/spline_type.rb#43
  def to_gv; end

  # source://ruby-graphviz//lib/graphviz/types/spline_type.rb#43
  def to_s; end

  # source://ruby-graphviz//lib/graphviz/types/spline_type.rb#64
  def triples; end

  private

  # @return [Boolean]
  #
  # source://ruby-graphviz//lib/graphviz/types/spline_type.rb#68
  def point?; end

  # @return [Boolean]
  #
  # source://ruby-graphviz//lib/graphviz/types/spline_type.rb#72
  def splite_type?; end
end

# source://ruby-graphviz//lib/graphviz/types/spline_type.rb#20
GraphViz::Types::SplineType::ENDP_MASK = T.let(T.unsafe(nil), Regexp)

# source://ruby-graphviz//lib/graphviz/types/spline_type.rb#27
GraphViz::Types::SplineType::FINAL_POINT_MASK = T.let(T.unsafe(nil), Regexp)

# source://ruby-graphviz//lib/graphviz/types/spline_type.rb#26
GraphViz::Types::SplineType::FINAL_SPLINE_MASK = T.let(T.unsafe(nil), Regexp)

# source://ruby-graphviz//lib/graphviz/types/spline_type.rb#19
GraphViz::Types::SplineType::FLOAT_MASK = T.let(T.unsafe(nil), Regexp)

# source://ruby-graphviz//lib/graphviz/types/spline_type.rb#22
GraphViz::Types::SplineType::POINT_MASK = T.let(T.unsafe(nil), Regexp)

# source://ruby-graphviz//lib/graphviz/types/spline_type.rb#24
GraphViz::Types::SplineType::SPLINE_MASK = T.let(T.unsafe(nil), Regexp)

# source://ruby-graphviz//lib/graphviz/types/spline_type.rb#21
GraphViz::Types::SplineType::STARTP_MASK = T.let(T.unsafe(nil), Regexp)

# source://ruby-graphviz//lib/graphviz/types/spline_type.rb#23
GraphViz::Types::SplineType::TRIPLE_MASK = T.let(T.unsafe(nil), Regexp)

# source://ruby-graphviz//lib/graphviz/utils.rb#4
module GraphViz::Utils
  # source://ruby-graphviz//lib/graphviz/utils.rb#20
  def find_executable(bin, custom_paths); end

  # source://ruby-graphviz//lib/graphviz/utils.rb#37
  def output_and_errors_from_command(cmd); end

  # source://ruby-graphviz//lib/graphviz/utils.rb#56
  def output_from_command(cmd); end
end

# source://ruby-graphviz//lib/graphviz/utils/colors.rb#5
class GraphViz::Utils::Colors
  # @return [Colors] a new instance of Colors
  #
  # source://ruby-graphviz//lib/graphviz/utils/colors.rb#12
  def initialize; end

  # Returns the value of attribute a.
  #
  # source://ruby-graphviz//lib/graphviz/utils/colors.rb#9
  def a; end

  # Returns the value of attribute b.
  #
  # source://ruby-graphviz//lib/graphviz/utils/colors.rb#9
  def b; end

  # Returns the value of attribute g.
  #
  # source://ruby-graphviz//lib/graphviz/utils/colors.rb#9
  def g; end

  # Returns the value of attribute h.
  #
  # source://ruby-graphviz//lib/graphviz/utils/colors.rb#10
  def h; end

  # source://ruby-graphviz//lib/graphviz/utils/colors.rb#55
  def hsv(h, s, v); end

  # source://ruby-graphviz//lib/graphviz/utils/colors.rb#93
  def hsv_string(s = T.unsafe(nil)); end

  # source://ruby-graphviz//lib/graphviz/utils/colors.rb#105
  def hsv_to_rgb(h, s, v); end

  # source://ruby-graphviz//lib/graphviz/utils/colors.rb#69
  def name(c = T.unsafe(nil)); end

  # Returns the value of attribute r.
  #
  # source://ruby-graphviz//lib/graphviz/utils/colors.rb#9
  def r; end

  # source://ruby-graphviz//lib/graphviz/utils/colors.rb#16
  def rgb(r, g, b, a = T.unsafe(nil)); end

  # source://ruby-graphviz//lib/graphviz/utils/colors.rb#101
  def rgb_to_hsv(r, g, b); end

  # source://ruby-graphviz//lib/graphviz/utils/colors.rb#85
  def rgba_string(c = T.unsafe(nil)); end

  # Returns the value of attribute s.
  #
  # source://ruby-graphviz//lib/graphviz/utils/colors.rb#10
  def s; end

  # Returns the value of attribute v.
  #
  # source://ruby-graphviz//lib/graphviz/utils/colors.rb#10
  def v; end

  class << self
    # source://ruby-graphviz//lib/graphviz/utils/colors.rb#116
    def hsv(h, s, v); end

    # source://ruby-graphviz//lib/graphviz/utils/colors.rb#162
    def hsv_to_rgb(h, s, v); end

    # source://ruby-graphviz//lib/graphviz/utils/colors.rb#122
    def name(c); end

    # source://ruby-graphviz//lib/graphviz/utils/colors.rb#110
    def rgb(r, g, b, a = T.unsafe(nil)); end

    # source://ruby-graphviz//lib/graphviz/utils/colors.rb#128
    def rgb_to_hsv(r, g, b); end
  end
end

# source://ruby-graphviz//lib/graphviz/utils/colors.rb#211
GraphViz::Utils::Colors::COLORS = T.let(T.unsafe(nil), Hash)

# source://ruby-graphviz//lib/graphviz/utils/colors.rb#6
GraphViz::Utils::Colors::HEX_FOR_COLOR = T.let(T.unsafe(nil), Regexp)

# source://ruby-graphviz//lib/graphviz/utils/colors.rb#7
GraphViz::Utils::Colors::RGBA = T.let(T.unsafe(nil), Regexp)

# From : http://www.geekmade.co.uk/2008/09/ruby-tip-normalizing-hash-keys-as-symbols/
#
# source://ruby-graphviz//lib/graphviz/core_ext.rb#27
class Hash
  include ::Enumerable

  # x = {
  #   :none => String,
  #   :png => "file.png",
  #   :svg => "file.svg"
  # }
  #
  # x.each_except( :key => [:none], :value => [/\.png$/] ) do |k, v|
  #   puts "#{k} -> #{v}"
  # end
  #
  # => svg -> file.svg
  #
  # source://ruby-graphviz//lib/graphviz/core_ext.rb#46
  def each_except(e, &b); end
end

# source://ruby-graphviz//lib/graphviz.rb#20
IS_CYGWIN = T.let(T.unsafe(nil), FalseClass)

# source://ruby-graphviz//lib/graphviz.rb#19
IS_JRUBY = T.let(T.unsafe(nil), FalseClass)

# source://ruby-graphviz//lib/graphviz/core_ext.rb#16
class Object < ::BasicObject
  include ::Kernel
  include ::ActiveSupport::ForkTracker::CoreExt
  include ::ActiveSupport::ForkTracker::CoreExtPrivate
  include ::PP::ObjectMixin

  # source://ruby-graphviz//lib/graphviz/core_ext.rb#17
  def to_ruby; end
end

# source://ruby-graphviz//lib/graphviz/types/rect.rb#1
class RectException < ::RuntimeError; end

# source://ruby-graphviz//lib/graphviz/types/spline_type.rb#1
class SplineTypeException < ::RuntimeError; end

# source://ruby-graphviz//lib/graphviz/core_ext.rb#1
class String
  include ::Comparable

  # source://ruby-graphviz//lib/graphviz/core_ext.rb#11
  def convert_base(from, to); end

  class << self
    # source://ruby-graphviz//lib/graphviz/core_ext.rb#2
    def random(size); end
  end
end
